package com.anuj.tree;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

public class InOrderTreeTraversal {

	public static void main(String[] args) {
		TreeNode root = new TreeNode(10);
		TreeNode l1 = new TreeNode(20);
		TreeNode r1 = new TreeNode(30);
		TreeNode l2 = new TreeNode(40);
		TreeNode r2 = new TreeNode(50);
		TreeNode l3 = new TreeNode(60);
		TreeNode r3 = new TreeNode(70);
		TreeNode l4 = new TreeNode(80);
		TreeNode r4 = new TreeNode(90);
		TreeNode l5 = new TreeNode(100);
		TreeNode r5 = new TreeNode(110);
		TreeNode l6 = new TreeNode(120);
		TreeNode r6 = new TreeNode(130);
		
		root.left = l1;
		root.right = r1;
		l1.left = l2;
		l1.right = r2;
		r1.left = l3;
		r1.right = r3;
		l2.left = l4;
		l2.right = r4;
		r2.left = l5;
		r2.right = r5;
		r3.left = l6;
		r3.right = r6;
		
		displayTree(root);
		
		List<Integer> list = recursiveTraversal(root);
		
		displayTree(list);
		
		list = iterativeTraversal
	}
	
	public static List<Integer> recursiveTraversal(TreeNode root){
		List<Integer> result = new ArrayList<Integer>();
		
		if(root == null){
			return result;
		}
		
		result.addAll(recursiveTraversal(root.left));
		result.add(root.value);
		result.addAll(recursiveTraversal(root.right));
		
		return result;
	}

	public static List<Integer> iterativeTraversal(TreeNode root){
		List<Integer> result = new ArrayList<Integer>();
		
		Stack<TreeNode> stack = new Stack<TreeNode>();
		
		if(root == null){
			return result;
		}
		
		boolean done = false;
		TreeNode current = root;
		while(!done){
			if(current != null){
				stack.push(current);
				current = current.left;
			}
			else{
				if(stack.isEmpty()){
					done = true;
				}
				else{
					current = stack.pop();
					result.add(current.value);
					current = current.right;
				}
			}
		}
		
		return result;
	}
	public static void displayTree(List<Integer> list){
		for(Integer temp : list){
			System.out.print( temp + " > ");
		}
		System.out.println();
	}
	
	public static void displayTree(TreeNode root){
		
		System.out.println(root);
	}
}
