package com.anuj.hackerrank;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

/*5 5
1 5 5 25 125*/
public class FindGP {

	static long countTriplets(List<Long> arr, long r) {
		long count = 0;
		Map<Long, Long> map = new HashMap<Long, Long>();
		Set<Long> set = new LinkedHashSet(arr);

		for (Long l : arr) {
			if (map.containsKey(l)) {
				map.put(l, map.get(l) + 1);
			} else {
				map.put(l, 1L);
			}
		}

		if(1 == 1 ){
			for(Long s: map.values()){
				long size = s;
				for(long i = size; i >= r; i--)
					count += (i - 1)*(i - (2))/(r-1);
			}
			//		return count;
		}
		else{
			for (Long l : set) {
				long pre = count;
				if (set.contains(l * r) && set.contains(l * r * r)) {
					count +=  map.get(l * r) * map.get(l * r * r);
					if(pre > count){
						System.out.println(":" + pre);
					}
				}
				map.put(l, map.get(l) - 1);

			}
		}
		return count;
	}

	public static void main(String[] args) throws IOException {
		Scanner scan = new Scanner(System.in);
		while (true) {
			int items = scan.nextInt();
			int gp = scan.nextInt();
			List<Long> inputs = new ArrayList<Long>();

			for (int i = 0; i < items; i++) {
				inputs.add(scan.nextLong());
			}

			long result = countTriplets(inputs, gp);
			System.out.println(result);
		}

	}

}
